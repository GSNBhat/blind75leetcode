
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]

Output: 6

Explanation: [4,-1,2,1] has the largest sum = 6


Kadane's  

max_so_far=0;
max_gobal=0;

for( i -> n){

  	max_so_far = a[i] + max_so_far;


	if(max_so_far > max_gobal){
		max_gobal = max_so_far;
	}

	if(max_so_far <= 0){
		max_so_far = 0;
	}
	

}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


print max_gobal

5,4,3,2,1


4,5,1,2,3

4,5,6,7,0,1,2

i = 0;
j = len;


while(i < 0 && j < 0  && i < n && j < n){

	mid = (i+j)/2

	if ( a[mid-1]  >  a[mid] && a[mid+1]  > a[mid]){
		return  a[mid];
	}

	if(a[mid-1]  >  a[mid] ){
		i=mid+1;

	}

	if(a[mid+1]  > a[mid]){
		j=mid-1;
	}

}

retrun min(a[0],a[len]);


Find Minimum in Rotated Sorted Array

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

            // find the max number in between nums[i], nums[i]*max_ending_here, nums[i]*min_ending_here
			// find the min number in between nums[i], nums[i]*max_ending_here, nums[i]*min_ending_here by handling zeros
			// replace max
			// find gobal max 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

https://leetcode.com/problems/3sum/


Input: nums = [-1,0,1,2,-1,-4]


Output: [[-1,-1,2],[-1,0,1]]

Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.


Given an integer array nums, return all the triplets 
[nums[i], nums[j], nums[k]] 
such that i != j, i != k, and j != k, 
and nums[i] + nums[j] + nums[k] == 0.


Let's try t0 solve pair

nums[i] + nums[j] = - nums[k]

map = {
	-1 => [0,4],
	0  => 
}


[-5,-4,-1,-1, 0,1,2,3]
for(i->n){
	target = sum - a[i];

	//same target problem
}

steps : 
	sort the array
	for(i->n){
		target = sum - a[i];

		//same target problem
	}

	

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


https://leetcode.com/problems/container-with-most-water/


It's a combination of 2 pointer shrinking and min,max problem


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Input: a = 1, b = 2
Output: 3

0001
0010

0011

  1111
  1100
 11011

 -1000 


 01111101000
 11111101000

case 1 : when two number postive 

 000000 
0010


int sum = a ^ b
int carry = (a & b) << 1

5 = 101
3 = 011
sum = 110 (A xor B)


5 = 101
3 = 011
y = 001 (A&B) 

carry = 010 (A&B) << 1



