
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]

Output: 6

Explanation: [4,-1,2,1] has the largest sum = 6


Kadane's  

max_so_far=0;
max_gobal=0;

for( i -> n){

  	max_so_far = a[i] + max_so_far;


	if(max_so_far > max_gobal){
		max_gobal = max_so_far;
	}

	if(max_so_far <= 0){
		max_so_far = 0;
	}
	

}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


print max_gobal

5,4,3,2,1


4,5,1,2,3

4,5,6,7,0,1,2

i = 0;
j = len;


while(i < 0 && j < 0  && i < n && j < n){

	mid = (i+j)/2

	if ( a[mid-1]  >  a[mid] && a[mid+1]  > a[mid]){
		return  a[mid];
	}

	if(a[mid-1]  >  a[mid] ){
		i=mid+1;

	}

	if(a[mid+1]  > a[mid]){
		j=mid-1;
	}

}

retrun min(a[0],a[len]);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

            // find the max number in between nums[i], nums[i]*max_ending_here, nums[i]*min_ending_here
			// find the min number in between nums[i], nums[i]*max_ending_here, nums[i]*min_ending_here by handling zeros
			// replace max
			// find gobal max 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




